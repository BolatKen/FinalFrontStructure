"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import styles from "./Cart.module.css";
import { ButtonOrange } from "@/components/ui/ButtonOrange/ButtonOrange";
import ModalPaymentFreedomPay from "@/components/ui/Modal/ModalPaymentFreedomPay";
import ModalInvoicePayment from "@/components/ui/Modal/ModalInvoicePayment";
import ModalUnifiedResult from "@/components/ui/Modal/ModalUnifiedResult";
import { sendTelegramMessage } from "@/lib/sendTelegramMessage";
import Toggle from '@/components/ui/Toggle/Toggle';

interface CartItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
  currency: string;
  image: string;
}

function getCartItems(): CartItem[] {
  const raw = localStorage.getItem("cartItems");
  if (!raw) return [];
  try {
    return JSON.parse(raw);
  } catch {
    return [];
  }
}

function saveCartItems(cart: CartItem[]) {
  localStorage.setItem("cartItems", JSON.stringify(cart));
}

export default function CartPage() {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  const [paymentMethod, setPaymentMethod] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [paymentStatus, setPaymentStatus] = useState<
    null | "freedom_success" | "freedom_error" | "invoice_success" | "invoice_error"
  >(null);

  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [phone, setPhone] = useState("");
  const [city, setCity] = useState("");
  const [street, setStreet] = useState("");
  const [house, setHouse] = useState("256");
  const [needAssembly, setNeedAssembly] = useState(false);

  useEffect(() => {
    const updateCart = () => {
      const loaded = getCartItems();
      setCartItems(loaded);
      setIsLoading(false);
    };

    updateCart();
    window.addEventListener("storage", updateCart);
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible") updateCart();
    });

    return () => {
      window.removeEventListener("storage", updateCart);
      document.removeEventListener("visibilitychange", updateCart);
    };
  }, []);

  useEffect(() => {
    if (!isLoading) {
      saveCartItems(cartItems);
    }
  }, [cartItems]);

  const totalPrice = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);

  const clearCart = () => {
    localStorage.removeItem("cartItems");
    setCartItems([]);
  };

  const increaseQuantity = (id: number) => {
    setCartItems((prev) =>
      prev.map((item) =>
        item.id === id ? { ...item, quantity: item.quantity + 1 } : item
      )
    );
  };

  const decreaseQuantity = (id: number) => {
    setCartItems((prev) =>
      prev
        .map((item) =>
          item.id === id ? { ...item, quantity: item.quantity - 1 } : item
        )
        .filter((item) => item.quantity > 0)
    );
  };

  const removeItem = (id: number) => {
    setCartItems((prev) => prev.filter((item) => item.id !== id));
  };

  const generateOrderMessage = (
    method: string,
    items: CartItem[],
    total: number
  ) => {
    const itemLines = items
      .map(
        (item) =>
          `ü™ë <b>${item.name}</b>\nüíµ ${item.price.toLocaleString()} ${item.currency} √ó ${item.quantity}`
      )
      .join("\n\n");

    return `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ ${method}</b>\n\n${itemLines}\n\nüí∞ <b>–ò—Ç–æ–≥–æ: ${total.toLocaleString()} ${items[0]?.currency}</b>\n\nüë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b>\n${firstName} ${lastName}\nüìû ${phone}\nüèôÔ∏è ${city}, —É–ª. ${street}, –¥. ${house}\nüîß –°–±–æ—Ä–∫–∞: ${needAssembly ? "–î–∞" : "–ù–µ—Ç"}`;
  };

  if (isLoading) return null;

  if (cartItems.length === 0) {
    return (
      <div className={styles.emptyCart}>
        <img src="/icons/korzina.png" alt="Empty Cart" className={styles.emptyIcon} />
        <h2 className={styles.emptyCartTitle}>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
        <p className={styles.emptyCartText}>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥–æ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞</p>
        <div className={styles.emptyCartButtons}>
          <Link href="/catalog"><ButtonOrange>–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥</ButtonOrange></Link>
          <Link href="/order-status">
            <ButtonOrange className={styles.secondaryButton}>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</ButtonOrange>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.cartPage}>
      <h1 className={styles.cartTitle}>–ö–æ—Ä–∑–∏–Ω–∞</h1>
      <div className={styles.cartContent}>
        <div className={styles.cartLeft}>
          <div className={styles.cartHeader}>
            <label><input type="checkbox" /> –í—ã–±—Ä–∞—Ç—å –≤—Å–µ</label>
            <button className={styles.deleteSelected}>–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>
          </div>

          {cartItems.map((item) => (
            <div key={item.id} className={styles.cartItem}>
              <input type="checkbox" className={styles.checkbox} />
              <img src={item.image} alt={item.name} className={styles.itemImage} />
              <div className={styles.itemInfo}>
                <div className={styles.itemTitle}>{item.name}</div>
                <div className={styles.itemPrice}>
                  {item.price.toLocaleString()} {item.currency} + 12 000 –±–æ–Ω—É—Å–æ–≤
                </div>
              </div>
              <div className={styles.quantityControl}>
                <button onClick={() => decreaseQuantity(item.id)}>-</button>
                <span>{item.quantity}</span>
                <button onClick={() => increaseQuantity(item.id)}>+</button>
                <button className={styles.removeBtn} onClick={() => removeItem(item.id)}>
                  <img src="/icons/trash.svg" alt="–£–¥–∞–ª–∏—Ç—å" />
                </button>
              </div>
            </div>
          ))}

          <div className={styles.customerInfo}>
            <h2 className={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ</h2>
            <div className={styles.inputGroup}>
              <input type="text" placeholder="–ò–º—è" className={styles.input} value={firstName} onChange={(e) => setFirstName(e.target.value)} />
              <input type="text" placeholder="–§–∞–º–∏–ª–∏—è" className={styles.input} value={lastName} onChange={(e) => setLastName(e.target.value)} />
            </div>
            <input type="text" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" className={styles.input} value={phone} onChange={(e) => setPhone(e.target.value)} />
          </div>

          <div className={styles.deliverySection}>
            <h2 className={styles.sectionTitle}>–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º</h2>
            <p className={styles.assemblyNote}>
              –ö—É—Ä—å–µ—Ä—ã –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ø–æ–¥—ä—ë–º–æ–º –º–µ–±–µ–ª–∏ –Ω–∞ —ç—Ç–∞–∂, –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç–≥—Ä—É–∑–∫–∞<br />
              –ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –º–µ–±–µ–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä
            </p>
            <div className={styles.inputGroup}>
              <input type="text" placeholder="–ì–æ—Ä–æ–¥" className={styles.input} value={city} onChange={(e) => setCity(e.target.value)} />
              <input type="text" placeholder="–£–ª–∏—Ü–∞" className={styles.input} value={street} onChange={(e) => setStreet(e.target.value)} />
              <input type="text" placeholder="–î–æ–º" className={styles.input} value={house} onChange={(e) => setHouse(e.target.value)} />
            </div>

            <div className={styles.assemblyCheckbox}>
              <div className={styles.assemblyCheckboxRow}>
                <Toggle setter={needAssembly} method={setNeedAssembly} />
                <span>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏</span>
              </div>

              <p className={styles.assemblyNote}>
                –ú–µ–±–µ–ª—å –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –≤–∏–¥–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –∑–∞–Ω–∏–º–∞–µ—Ç<br />
                –±–æ–ª—å—à–æ–π –æ–±—ä—ë–º, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞–≤–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å –¥–æ—Ä–æ–∂–µ
              </p>
            </div>
          </div>

          <div className={styles.paymentSection}>
            <h2 className={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>
            <div className={styles.paymentMethods}>
              <label className={`${styles.paymentCard} ${paymentMethod === "invoice" ? styles.active : ""}`}>
                <div className={styles.radioWrapper}>
                  <input
                    type="radio"
                    name="payment"
                    value="invoice"
                    checked={paymentMethod === "invoice"}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                  />
                  <span className={styles.radioCustom}></span>
                </div>
                <img src="/icons/inquiry.svg" alt="icon" />
                <div>
                  <div className={styles.paymentTitle}>–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É</div>
                  <div className={styles.paymentDesc}>–î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ø—Ä–∏ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–º —Ä–∞—Å—á—ë—Ç–µ —Å –ø–æ–ª–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</div>
                </div>
              </label>


              <label className={`${styles.paymentCard} ${paymentMethod === "freedompay" ? styles.active : ""}`}>
                <input type="radio" name="payment" value="freedompay" onChange={(e) => setPaymentMethod(e.target.value)} />
                <img src="/icons/freedom.svg" alt="" />
                <div>
                  <div className={styles.paymentTitle}>Freedom Pay</div>
                  <div className={styles.paymentDesc}>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É –¥–æ 6 –º–µ—Å—è—Ü–µ–≤ –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç</div>
                </div>
              </label>

              <label className={`${styles.paymentCard} ${paymentMethod === "kaspi" ? styles.active : ""}`}>
                <input type="radio" name="payment" value="kaspi" onChange={(e) => setPaymentMethod(e.target.value)} />
                <img src="/icons/kaspi.svg" alt="" />
                <div>
                  <div className={styles.paymentTitle}>Kaspi</div>
                  <div className={styles.paymentDesc}>–û–ø–ª–∞—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –¥–æ 3 –º–µ—Å—è—Ü–µ–≤</div>
                </div>
              </label>
            </div>
          </div>

        </div>

        <div className={styles.cartRight}>
          <div className={styles.promoBlock}>
            <h2 className={styles.sectionTitle}>–ü—Ä–æ–º–æ-–∫–æ–¥</h2>
            <input
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
              className={styles.promoInput}
            />
            <button className={styles.promoButton}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
          </div>


          <div className={styles.totalBlock}>
            <h2>–ò—Ç–æ–≥–æ:</h2>
            <p>{cartItems.length} —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—É–º–º—É</p>
            <div className={styles.totalPrice}>
              {totalPrice.toLocaleString()} {cartItems[0]?.currency}
            </div>
            <p className={styles.discount}>–°–∫–∏–¥–∫–∞ - 240.000 KZT</p>
            <div className={styles.bonus}>+ 12 000 –±–æ–Ω—É—Å–æ–≤</div>
          </div>

          <ButtonOrange
            onClick={() => {
              if (paymentMethod === "freedompay") {
                setShowModal(true);
              } else if (paymentMethod === "invoice") {
                setShowInvoiceModal(true);
              } else {
                router.push("/order-confirmation");
              }
            }}
          >
            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
          </ButtonOrange>

          <button onClick={clearCart} className={styles.clearCartButton}>
            –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
          </button>

          <div className={styles.legalLinks}>
            <Link href="#">–î–æ—Å—Ç–∞–≤–∫–∞</Link>
            <Link href="#">–û—Ñ–µ—Ä—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü</Link>
            <Link href="#">–û—Ñ–µ—Ä—Ç–∞ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü</Link>
          </div>
        </div>
      </div>

      {showModal && (
        <ModalPaymentFreedomPay
          amount={totalPrice}
          onClose={() => setShowModal(false)}
          onResult={async (status) => {
            setShowModal(false);
            setPaymentStatus(status);
            if (status === "freedom_success") {
              const msg = generateOrderMessage("FreedomPay", cartItems, totalPrice);
              await sendTelegramMessage(msg);
            }
          }}
        />
      )}

      {showInvoiceModal && (
        <ModalInvoicePayment
          onClose={() => setShowInvoiceModal(false)}
          onResult={async (status) => {
            setShowInvoiceModal(false);
            setPaymentStatus(status);
            if (status === "invoice_success") {
              const msg = generateOrderMessage("–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É", cartItems, totalPrice);
              await sendTelegramMessage(msg);
            }
          }}
        />
      )}

      {paymentStatus && (
        <ModalUnifiedResult
          type={paymentStatus}
          onClose={() => setPaymentStatus(null)}
        />
      )}
    </div>
  );
}
