// components/ConfiguratorModal/ConfiguratorModal.tsx
import { useState } from "react";
import styles from "./ConfiguratorModal.module.css";
import { Color } from "@/types/color";
import { Material } from "@/types/product";
import { sendTelegramMessage } from "@/lib/telegram";


interface ConfiguratorModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedMaterials: Record<number, number>;
  selectedColors: Record<number, Color | null>;
  partsInfo: {
    partId: number;
    partName: string;
    materials: Material[];
  }[];
}

export default function ConfiguratorModal({
  isOpen,
  onClose,
  selectedMaterials,
  selectedColors,
  partsInfo,
}: ConfiguratorModalProps) {
  const [phone, setPhone] = useState("");
const [error, setError] = useState("");

const [successMessage, setSuccessMessage] = useState("");

function handlePhoneChange(e: React.ChangeEvent<HTMLInputElement>) {
  setPhone(e.target.value);
  setError("");
}

async function handleSubmit() {
  const digits = phone.replace(/\D/g, "");
  if (digits.length < 10) {
    setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
    return;
  }

  const messageLines = partsInfo.map(({ partId, partName, materials }) => {
    const selectedMaterialId = selectedMaterials[partId];
    const material = materials.find((m) => m.id === selectedMaterialId);
    const color = selectedColors[partId];
    return `üîπ <b>${partName}</b>: ${material?.name ?? "‚Äî"} / <i>${color?.name ?? "‚Äî"}</i>`;
  });

  const message = [
  `üì• <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞</b>`,
  ``,
  `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`,
  `üõ†Ô∏è <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>`,
  ...messageLines,
  ``,
  `üïí <i>–í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}</i>`,
].join("\n");

  try {
    await sendTelegramMessage(message);
    setSuccessMessage("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
    setPhone("");
  } catch (err) {
    setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}









  if (!isOpen) return null;



  
  return (

    
    <div className={styles.overlay}>
      <div className={styles.modal}>
        <h2>–í–∞—à –∑–∞–∫–∞–∑</h2>


        {successMessage && (
  <div className={styles.successAnimated}>
    <div className={styles.checkIcon}>‚úî</div>
    <h3>{successMessage}</h3>
    <p className={styles.thankYou}>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</p>
  </div>
)}

        <ul className={styles.summary}>
          {partsInfo.map(({ partId, partName, materials }) => {
            const selectedMaterialId = selectedMaterials[partId];
            const material = materials.find((m) => m.id === selectedMaterialId);
            const color = selectedColors[partId];

            return (
              <li key={partId}>
                <strong>{partName}</strong>: {material?.name ?? "‚Äî"} / –¶–≤–µ—Ç:{" "}
                <span
                  style={{
                    display: "inline-block",
                    width: "1em",
                    height: "1em",
                    backgroundColor: color?.hex_code,
                    borderRadius: "50%",
                    verticalAlign: "middle",
                    marginRight: "0.5em",
                  }}
                ></span>
                {color?.name ?? "‚Äî"}
              </li>
            );
          })}
        </ul>

        <div className={styles.inputBlock}>
  <label htmlFor="phone">–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
  <input
    id="phone"
    type="tel"
    value={phone}
    onChange={handlePhoneChange}
    placeholder="+7 (___) ___-__-__"
    className={`${styles.input} ${error ? styles.inputError : ""}`}
  />
  {error && <div className={styles.error}>{error}</div>}
</div>


        <div className={styles.actions}>
          <button onClick={onClose}>–û—Ç–º–µ–Ω–∞</button>
          <button onClick={handleSubmit}>
  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
</button>

        </div>
      </div>
    </div>
  );
}
